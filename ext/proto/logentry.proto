/*
 * Copyright 2024 The Bazel Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package com.google.idea.blaze.ext;

option java_package = "com.google.idea.blaze.ext";

message IntellijLogEntry {
  optional int64 end_time_millis = 1;
  optional int64 duration_millis = 2;
  optional string product_id = 3;
  optional string product_version = 4;
  optional string product_build_number = 5;
  optional string plugin_id = 6;
  optional string plugin_version = 7;
  optional string username = 8;
  optional string hostname = 9;
  optional uint64 process_id = 10;
  optional string originating_jar = 11;
  optional string g3plugins_version = 12;

  enum Platform {
    UNKNOWN = 0;
    MAC = 1;
    LINUX = 3;
    CHROMEOS = 4;
  }
  optional Platform platform = 13;

  optional EnvironmentInfo environment_info = 14;

  oneof payload {
    Action action = 15;
    Event event = 16;
    CompletionItem completion_item = 17;
    IntellijConfiguration configuration = 18;
    ProjectInfo project_info = 19;
    EditingEvent editing_event = 20;
    IdeArtifactStats ide_artifact_stats = 21;
    EditedFile edited_file = 22;
    FreezeInfo freeze_info = 23;
    LogMessage log_message = 24;
    IndexingDiagnostic indexing_diagnostic = 25;
  }
}

message LogMessage {
  optional string logger_name = 1;
  optional LogLevel level = 2;
  optional string message = 3;
  optional Exception exception = 4;

  enum LogLevel {
    UNKNOWN_LEVEL = 0;
    TRACE_LEVEL = 1;
    DEBUG_LEVEL = 2;
    INFO_LEVEL = 3;
    WARN_LEVEL = 4;
    ERROR_LEVEL = 5;
    FATAL_LEVEL = 6;
  }
}

message EnvironmentInfo {
  optional bool chrome_remote_desktop = 1;
  enum MachineType {
    UNKNOWN = 0;
    DESKTOP = 1;
    LAPTOP = 2;
    SERVER = 3;
  }
  optional MachineType machine_type = 2;
  optional bool proxy = 3;
}

message UserSetting {
  optional string namespace = 1;
  map<string, string> settings = 2;
}

message ProjectInfo {
  optional bool is_blaze_plugin_project = 1;
  repeated string configured_vcses = 2;
  optional bool has_google3_content_root = 3;
  optional string project_hash = 4;
  repeated UserSetting setting = 5;
  optional ProjectType project_type = 6;

  enum ProjectType {
    UNKNOWN = 0;
    LEGACY_SYNC = 1;
    QUERY_SYNC = 2;
  }
}

message Action {
  optional string action_class = 1;
  optional string action_id = 2;
  optional ProjectInfo project_info = 3;
  optional bool is_from_context_menu = 4;
  optional bool is_from_action_toolbar = 5;
  optional string place = 6;
  optional string tool_window_id = 7;
  optional string project_hash = 8;
  optional string action_text = 9;
  optional string language = 10;
  optional uint32 selected_items = 11;
  optional uint32 selected_files = 12;
  optional uint32 selected_changes = 13;
  optional uint32 selected_changelists = 14;
  optional string file_extension = 15;
  optional uint32 target_changelists = 16;
}

message Event {
  optional string namespace = 6;
  optional string event_type = 1;
  optional int64 end_time_millis = 2;
  optional int64 duration_millis = 3;
  map<string, string> key_value = 4;
  repeated Event subevent = 5;
}

message CompletionItem {
  optional string language = 1;
  optional bool auto_accepted = 2;
  optional int32 selection_index = 5;
  optional int32 completion_length = 7;
}

message IntellijConfiguration {
  message Plugin {
    optional string id = 1;
    optional string name = 2;
    optional string version = 3;
    optional bool enabled = 4;
    optional bool bundled = 5;
  }

  repeated Plugin plugins = 1;
  repeated UserSetting application_setting = 2;
  map<string, string> experiments = 3;
  repeated string jvm_argument = 4;
}

message EditingEvent {
  optional int64 number_of_characters = 1;
  optional string project_hash = 2;
  optional string language = 3;
}

message IdeArtifactStats {
  repeated DirectoryStats directory_stats = 1;

  message DirectoryStats {
    optional string originating_ide_part = 1;
    optional string purpose = 2;
    optional string directory_name = 3;
    optional string path = 4;
    optional int64 size = 5;
    optional int64 max_file_size = 6;
    optional int64 avg_file_size = 7;
    optional int64 file_count = 8;
    repeated FileStats largest_files = 9;

    message FileStats {
      optional string relative_path = 1;
      optional int64 size = 2;
    }
  }
}

message EditedFile {
  optional string language = 1;
  optional string extension = 2;
  optional bool is_from_save = 3;
}

// Contains useful information to be logged when the IDE faces freezes
message FreezeInfo {
  // This is used to group related thread dumps together, since they'll be in
  // different log messages, but have the same start_time.
  optional int64 start_time_millis = 1;
  repeated ThreadInfo thread_info = 2;
  // Indicates if IDE-wide freeze: not just UI thread blocked, but sampling
  // thread too.
  optional bool ide_wide_freeze = 3;
  // User was developing IntelliJ plugins
  optional bool user_was_a_dev = 4;
  // The time since the previous log entry for this freeze event. Used to
  // iteratively combine log entries.
  optional int64 logging_interval_millis = 5;
  // File I/O trace samples since the previous log entry for this freeze event.
  // Should be combined to get the full trace.
  optional FileTrace file_trace = 6;
  // Approximate uptime of the IDE when freeze occurred.
  optional int64 uptime_millis = 7;
}

message ThreadInfo {
  optional string name = 1;
  optional uint64 id = 2;
  optional string state = 3;
  optional string lock_name = 4;
  optional uint64 lock_owner_id = 5;
  repeated StackFrame stack_trace = 6;
}

message Exception {
  optional string class_name = 1;
  optional string message = 2;
  repeated StackFrame stack_trace = 3;
  optional Exception cause = 4;
  repeated Exception suppressed = 5;
}

// these fields come directly from java.lang.StackTraceElement.
message StackFrame {
  optional string class_name = 1;
  optional string method_name = 2;
  optional string filename = 3;
  optional int32 line_number = 4;
}

message FileTrace {
  repeated AggregatedPathSamples samples = 1;
}

message AggregatedPathSamples {
  repeated StackFrame stack_trace = 1;
  // The timestamp of the first file access in the series.
  optional int64 first_sample_ms = 2;
  // Path string -> PathSample.
  // The path is relative or absolute depending on PathKind.
  map<string, PathSample> path_samples = 4;
}

message PathSample {
  optional PathKind path_kind = 1;
  // The first time this file path is accessed with a given stack.
  optional int64 first_sample_ms = 2;
  // Number of times this file path was accessed with a given stack.
  optional int32 count = 3;
  // Total duration of accesses.
  optional int64 total_duration_millis = 4;

  enum PathKind {
    UNKNOWN = 0;
    IN_PROJECT = 1;
    IN_WORKSPACE = 2;
  }
}

message IndexingDiagnostic {
  repeated ProviderStatistic provider_statistics = 1;
  optional int64 total_indexing_time_millis = 2;
  optional string project_hash = 3;
  optional int64 total_updating_time_millis = 4;
  optional int64 scan_files_duration_millis = 5;
  message ProviderStatistic {
    enum ProviderType {
      PROVIDER_TYPE_UNSPECIFIED = 0;
      LIBRARY = 1;
      MODULE = 2;
      JDK = 3;
      SYNTHETIC_LIBRARY = 4;
      SDK = 5;
    }

    enum JarType {
      JAR_TYPE_UNSPECIFIED = 0;
      IJAR = 1;
      HJAR = 2;
    }
    optional string provider_name = 2;
    optional ProviderType provider_type = 3;
    optional int64 total_indexing_time_millis = 6;
    optional string library_hash = 4;
    optional JarType jar_type = 5;
    optional string target = 7;
  }
}